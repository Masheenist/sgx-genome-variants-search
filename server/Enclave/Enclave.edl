#include "../include/config.h"

enclave
{
	include "sgx_trts.h"
	include "sgx_utils.h"
	include "sgx_tkey_exchange.h"

	from "sgx_tkey_exchange.edl" import *;

	trusted
	{
		include "config.h"

		public sgx_status_t get_report([out] sgx_report_t* report, [in] sgx_target_info_t* target_info);

		public size_t get_pse_manifest_size();

		public sgx_status_t get_pse_manifest([out, count=sz] char *buf, size_t sz);

		public sgx_status_t enclave_ra_init(sgx_ec256_public_t key, int b_pse, [out] sgx_ra_context_t* ctx, [out] sgx_status_t* pse_status);

		public sgx_status_t enclave_ra_init_def(int b_pse, [out] sgx_ra_context_t* ctx, [out] sgx_status_t* pse_status);

		public sgx_status_t enclave_ra_close(sgx_ra_context_t ctx);

		// Application specific enclave functions
		public void enclave_derive_key(sgx_ra_context_t ctx);

		public void enclave_init_sum();

		//public void enclave_out_function([out, size = len] char* buf, size_t len);

		public int enclave_decrypt_for_me(sgx_ra_context_t ctx,
											[in, size = ciphertext_len] unsigned char* ciphertext, 
											int ciphertext_len, 
											[user_check] unsigned char* plaintext,
											[out, size = 16] uint8_t* sk);

//		public void enclave_decrypt_process(sgx_ra_context_t ctx,
//											[in, size = ciphertext_len] uint8_t* ciphertext,
//											size_t ciphertext_len);
		public void enclave_decrypt_process(sgx_ra_context_t ctx,
											[user_check] uint8_t* ciphertext,
											size_t ciphertext_len);

		public void enclave_get_result([out, size = 8] uint64_t* result);
		public void enclave_get_res_buf([out, size = 40] uint32_t* res);

		// Open-Addressing Hash-Table public ECALL interface
		public void enclave_init_oa();
		public void enclave_decrypt_process_oa(sgx_ra_context_t ctx,
													[user_check] uint8_t* ciphertext,
													size_t ciphertext_len);

		// Robin-Hood-Hash-Table public ECALL interface
		public void enclave_init_rhht();
		public void enclave_decrypt_process_rhht(sgx_ra_context_t ctx,
													[user_check] uint8_t* ciphertext,
													size_t ciphertext_len);

		// Chained-Move-to-Front Hash Table public ECALL interface
		public void enclave_init_cmtf();
		public void enclave_decrypt_process_cmtf(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len, uint32_t type); // uint32_t chunk_num)

		// Chi-Squared Test public ECALL interface
		public void oa_init_chi_sq(uint16_t case_count, uint16_t control_count);
		public void rhht_init_chi_sq(uint16_t case_count, uint16_t control_count);
		public void cmtf_init_chi_sq(uint16_t case_total, uint16_t control_total);

		// Count-Min-Sketch public ECALL interface
		public void enclave_init_cms();
		public void enclave_decrypt_update_cms(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_decrypt_query_cms(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
	};
    
	untrusted
	{
		include "config.h"
	};
};
