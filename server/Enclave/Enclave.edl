#include "../include/config.h"

enclave
{
	include "sgx_trts.h"
	include "sgx_utils.h"
	include "sgx_tkey_exchange.h"
	include "util.h"

	from "sgx_tkey_exchange.edl" import *;

	trusted
	{
		include "config.h"

		public sgx_status_t get_report([out] sgx_report_t* report, [in] sgx_target_info_t* target_info);

		public size_t get_pse_manifest_size();

		public sgx_status_t get_pse_manifest([out, count=sz] char *buf, size_t sz);

		public sgx_status_t enclave_ra_init(sgx_ec256_public_t key, int b_pse, [out] sgx_ra_context_t* ctx, [out] sgx_status_t* pse_status);

		public sgx_status_t enclave_ra_init_def(int b_pse, [out] sgx_ra_context_t* ctx, [out] sgx_status_t* pse_status);

		public sgx_status_t enclave_ra_close(sgx_ra_context_t ctx);

		// Application specific enclave functions
		public void enclave_derive_key(sgx_ra_context_t ctx);

		// Public ECALL interface for getting results out of the enclave
		// NOTE: This output is NOT encrypted since this a proof of concept
		//public void enclave_get_res([out, size = 524288] uint32_t* res);
		//public void enclave_get_res_buf([out, size = 4000] uint32_t* res);
		//public void enclave_get_mcsk_res([out, size = 8004] float* my_res);
		//public void enclave_get_mcsk_sigma([out, size = 8000] float* my_res);
		public void enclave_get_eig_buf([out, size = 32000] float* my_res);
		//public void enclave_ortho([out, size = 24] float* my_res);
		//public void mcsk_pull_row();
		//public void enclave_get_mem_used([out, size = 4] uint32_t* mem_usage);
		public void enclave_init_temp_buf(int ENC_BUFF_LEN);
		public void enclave_get_temp_buf([user_check] float* res, int len);
		public void enclave_free_temp_buf();
		public void enclave_get_mh_ids([user_check] uint32_t* ids, int l);
		public void enclave_get_mh_vals([user_check] uint16_t* vals, int l);
		public void enclave_get_mh_pairs([user_check] res_pair* pairs, int l);
		public void enclave_init_id_buf(int ENC_BUFF_LEN);
		public void enclave_get_id_buf([user_check] uint32_t* id, int k);
		public void enclave_free_id_buf();
		public void enclave_init_res_buf(int ENC_BUFF_LEN);
		public void enclave_get_res_buf([user_check] float* countf, int k);
		public void enclave_get_res_pairs([user_check] res_pair* pairs, int k);
		public void enclave_free_res_buf();

		// Open-Addressing Hash-Table public ECALL interface
		public void enclave_init_oa(int OA_INIT_CAPACITY);
		public void enclave_decrypt_process_oa(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_free_oa();

		// Robin-Hood-Hash-Table public ECALL interface
		public void enclave_init_rhht(int RHHT_INIT_CAPACITY);
		public void enclave_decrypt_process_rhht(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_free_rhht();
		public void enclave_free_rhht_pcc();

		// Three-Pass version
		public void enclave_init_sketch_rhht(int MH_INIT_CAPACITY);
		public void enclave_decrypt_process_sketch_rhht(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);

		public void enclave_init_rhht_pcc(int MH_INIT_CAPACITY);
		public void enclave_decrypt_process_rhht_pcc(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);

		// Chained-Move-to-Front Hash Table public ECALL interface
		public void enclave_init_cmtf(int CMTF_NUM_BUCKETS);
		public void enclave_decrypt_process_cmtf(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_free_cmtf();

		// Count-Min-Sketch public ECALL interface
		public void enclave_init_cms(int CMS_WIDTH, int CMS_DEPTH);
		public void enclave_normalize_cms_st_length();
		public void enclave_decrypt_update_cms(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_decrypt_update_cms_row(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_decrypt_query_cms(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_free_cms();

		// Multi-threaded CMS public ECALL interface
		public void enclave_decrypt_store_cms(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		//public void enclave_update_cms(sgx_ra_context_t ctx, uint32_t thread_num);
		public void enclave_clear_cms(sgx_ra_context_t ctx);
		public sgx_status_t ecall_thread_cms(int thread_num, int nrows_per_thread);
		public sgx_status_t ecall_thread_cms_ca(int thread_num, int part_num);
		public sgx_status_t ecall_thread_csk(int thread_num, int nrows_per_thread);

		// Count-Sketch public ECALL interface
		public void enclave_init_csk(int CSK_WIDTH, int CSK_DEPTH);
		public void enclave_init_csk_f(int CSK_WIDTH, int CSK_DEPTH);
		public void enclave_free_csk();
		public void enclave_decrypt_update_csk(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_decrypt_update_csk_row(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_decrypt_update_csk_f(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_decrypt_query_csk(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_decrypt_query_csk_f(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);

		// Matrix Count-Sketch public ECALL interface
		public void enclave_reset_file_idx();
		public void enclave_init_mcsk(int MCSK_WIDTH, int MCSK_NUM_PC, float MCSK_EPS);
		public void enclave_decrypt_update_mcsk(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_mcsk_mean_centering();

		// Multi-threaded CSK public ECALL interface
		public void enclave_decrypt_store_csk(sgx_ra_context_t ctx, [user_check] uint8_t* ciphertext, size_t ciphertext_len);
		public void enclave_update_csk(sgx_ra_context_t ctx, uint32_t thread_num);
		public void enclave_clear_csk(sgx_ra_context_t ctx);
		public void enclave_svd();

		// Min-Heap public ECALL interface
		public void enclave_init_mh(int MH_INIT_CAPACITY);
		public void enclave_init_mh_f(int MH_INIT_CAPACITY);
		public void enclave_free_mh();

		// Chi-Squared Test public ECALL interface
		public void oa_init_chi_sq(uint16_t case_count, uint16_t control_count, int k);
		public void rhht_init_chi_sq(uint16_t case_count, uint16_t control_count, int k);
		public void cmtf_init_chi_sq(uint16_t case_total, uint16_t control_total, int k);
		public void rhht_init_cat_chi_sq(uint16_t count_total, int k);
	};
    
	untrusted
	{
		include "config.h"
	};
};
